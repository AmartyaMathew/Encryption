This algorithm may be quantum resistant. Please note this is not verified to be quantum resistant. This algorithm is not yet proven to be 
safe for any sort of deployment yet. 

Key Generation
We assume that the plaintext is in ASCII format which includes 128 characters where each character is represented using 7 bits. We then have 
to select 2 parameters. It is recommended that the parameters be multiples of 2. The first parameter determines our range and the second 
parameter will be the number of substitutes available. 

Let us for example choose 16 and 8. 128x16=2048. 2048 is out upper bound and 128 is our lower bound. Now what we have to do is to choose 8 
numbers between 128 and 2047 (both inclusive) for each ASCII character.

Once a number is taken for a particular character it should not be taken again. For example 146 is taken as a number for ‘A’ it cannot be 
chosen again. Since there are 128 characters will be choosing 128*8=1024 characters out of 128*15=1920(since the first 128 numbers are 
already taken). 

After our key is chosen there will still be 896 characters left which we can use for padding and inducing even more randomness. Our key size 
will be 11264 bits long which is much longer than any modern day encryption standard. 

Encryption

To encrypt a message we look at each character of a plaintext message. Let us assume ‘A’ is the first character, we will simply look at our 
key and see the numbers we can substitute in place of the ASCII value of ‘A’(65). This substitution can be completely random as the key has 
the information required to help us understand that the encrypted number is ‘A’. We do this until the entire message is encrypted. After the 
decryption section this paper will discuss how randomness can be introduced to the substitutions. It was mentioned after the key is chosen we 
will have 896 characters left.We can randomly place those characters in the message as well if we wish to. Making a substitution will take 
constant time and we need to make substitutions for the whole message so the time complexity for encryption will be O(n). 

Decryption 

This is a symmetric key algorithm so we assume that the key is shared beforehand. Now we take one character of the ciphertext and we see if 
that character is present in the key or not. If the character is present in the key we find out to which ASCII value it maps to and we 
substitute that ASCII value in place of the message value. If the character is not in the key it means that the value was put there as 
padding or to induce more randomness so we simply skip that character. Now for each character we have to find the corresponding ASCII 
charterer which will take O(log n, base is 2). We need to do this for n characters so O(nlogn) is the final complexity. 

Randomness

To induce perfect randomness we can use irrational numbers like Pie or Euler's number. Irrational numbers are good for randomness as there 
is no fixed pattern for their digits and they are essentially infinite.

Introducing more randomness in the cipher text

To introduce more randomness in the ciphertext we can at random locations substitute characters from 128- 2047 that are not part of the key. 
This will prevent known plaintext attacks(as the same input can be given to the algo and a different output will be generated) and chosen 
ciphertext attacks(as an adversary will have no idea where to make an edit unlike in AES-CTR where an adversary can make meaningful edits). 

While decrypting we simply need to check if the characters are in the key set or not. If they are there we can decrypt them, else we need to 
ignore them. The time complexity still remains as nlogn. 

Disadvantages of this scheme
1) Key generation will take some time. 
2) If maximum security is employed then the message size will be 3 times the original message. 
3) The key size for the ASCII set is far larger than any other encryption algo. 

Advantages of this scheme
1) Perfect randomness can be incorporated into the text leaving the only option of attack as brute force on the key. 

Calculations
How long would it take to brute force the key assuming the conditions we have taken so far?

Due to the perfect randomness incorporated into the algorithm brute forcing the key you would be the only way you can get the message. 
This is if randomness is increased using the random character substitution. The perfect randomness elmimates known plaintext or ciphertext 
attacks. Frequency based attacks are also not possible. 

To guess the key we need 1024 characters from a set of 1920 characters. The order of the characters matters here. Hence we must first 
calculate the total number of possible combinations which is 1920 C 1024. 

1920 C 1024 =242340871886428770805136166181378937899387314597450369596022813243960155377667400149482960676140491802422071878778439997125378932928124
4912574729415493749513966927317061044626681893193288082161730766336169636864412300771515715461470467731477672919364249442107406999207770015203585249
0185338171294018761617342118072386227278895112968596192676034660295328252232139565829499816329850715184422233839526148383031856269103187432139342675
777976446855725456093855614466116809461411500475191808399146642725804309178855251037484739002686015669358585367356827253767214100635769397905875

The result is a 575 digit long number. Out of 1920 C 1024 combinations only one is the correct one and it can only be found by brute force. 






 







